[{"/Users/laurenwright/Dev/lmw-gui-components/src/index.js":"1","/Users/laurenwright/Dev/lmw-gui-components/src/App.tsx":"2","/Users/laurenwright/Dev/lmw-gui-components/src/lib/NavBar.tsx":"3"},{"size":198,"mtime":1642198379041,"results":"4","hashOfConfig":"5"},{"size":1092,"mtime":1642198475219,"results":"6","hashOfConfig":"5"},{"size":2229,"mtime":1642198463379,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1ugvcry",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/laurenwright/Dev/lmw-gui-components/src/index.js",["16"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","/Users/laurenwright/Dev/lmw-gui-components/src/App.tsx",[],"/Users/laurenwright/Dev/lmw-gui-components/src/lib/NavBar.tsx",["17"],"import * as React from 'react';\nimport \"./NavBar.css\"\nimport { Link } from \"react-router-dom\";\nimport MenuList from '@mui/material/MenuList';\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/icons-material/Menu'\nimport Paper from '@mui/material/Paper';\nimport Popover from '@mui/material/Popover';\nimport Button from '@mui/material/Button';\n\nexport type NavBarProps = {\n  name: string,\n  links: RouteObj[],\n  backgroundColor: string,\n  fontColor: string\n}\nexport interface RouteObj {\n  title: string;\n  path: string;\n\n}\n\n// Class counter example for React, but using Watchables (which is overkill here, but hey it's an example!)\n\n\nfunction NavBar({ name, links, backgroundColor, fontColor }: NavBarProps) {\n\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n\n  return (\n\n    <header className=\"navigation\" style={{ backgroundColor: backgroundColor }}>\n      <div className=\"left\">\n        <a style={{ color: fontColor }}>{name}</a>\n      </div>\n      <div className=\"right\">\n        <div>\n          <Button startIcon={<Menu sx={{fontSize: \"30px !important\", color: fontColor, marginRight:\"-11px\"}}/>} aria-describedby={id}  onClick={handleClick}></Button>\n          <Popover\n            id={id}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={handleClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'left',\n            }}\n          >\n            <Paper elevation={6}>\n              <MenuList style={{}}>\n                {links.map((linkObj) => {\n                  return (\n                    <MenuItem>\n                      <Link className=\"link-items\" style={{ color: fontColor }} to={linkObj.path}>{linkObj.title}</Link>\n                    </MenuItem>\n                  )\n                })}\n              </MenuList>\n            </Paper>\n          </Popover>\n        </div>\n\n      </div>\n    </header>\n  );\n\n}\n\nexport default NavBar;\n\n",{"ruleId":null,"fatal":true,"severity":2,"message":"18","line":2},{"ruleId":"19","severity":1,"message":"20","line":46,"column":9,"nodeType":"21","endLine":46,"endColumn":41},"Parsing error: /Users/laurenwright/Dev/lmw-gui-components/babel.config.json: Error while parsing config - JSON5: invalid character 'n' at 2:12","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]